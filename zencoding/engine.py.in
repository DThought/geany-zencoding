#  engine.py.in
#
#  Copyright 2011 Matthew Brush <mbrush@codebrainz.ca>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

import os
import sys
from ConfigParser import SafeConfigParser
from zencoding import zen_core as zen


DEFAULT_ZENDIR = '@DEFAULT_ZENDIR@'
DEFAULT_DOC_TYPE = '@DEFAULT_DOC_TYPE@'
DEFAULT_PROFILE = '@DEFAULT_PROFILE@'
DEFAULT_PROFILE_DIR = '@DEFAULT_PROFILE_DIR@'

DEFAULT_PROFILE_DICT = {	'tag_case': 'lower',
							'attr_case': 'lower',
							'attr_quotes': 'double',
							'tag_nl': 'decide',
							'place_cursor': False,
							'indent': True,
							'self_closing_tag': 'xhtml' }


class ZenEngine(object):

	_zendir = None
	_profiles_dir = None
	active_profile = None
	doc_type = None


	def __init__(self, doc_type=DEFAULT_DOC_TYPE, zendir=DEFAULT_ZENDIR,
		active_profile=DEFAULT_PROFILE, profiles_dir=DEFAULT_PROFILE_DIR):

		self.doc_type = doc_type
		self._zendir = zendir


		self._profiles_dir = profiles_dir
		self.active_profile = active_profile

		self._init_profiles()


	def _init_profiles(self):

		zen.setup_profile(DEFAULT_PROFILE, DEFAULT_PROFILE_DICT)

		for cfg_file in os.listdir(self._profiles_dir):

			if cfg_file.endswith(".conf"):

				d = dict()
				cfg_file = os.path.join(self._profiles_dir, cfg_file)

				p = SafeConfigParser()
				p.read(cfg_file)

				if p.has_option('profile', 'name'):
					name = p.get('profile', 'name')
				else:
					continue

				if p.has_option('profile', 'tag_case'):
					d['tag_case'] = p.get('profile', 'tag_case').lower()

				if p.has_option('profile', 'attr_case'):
					d['attr_case'] = p.get('profile', 'attr_case').lower()

				if p.has_option('profile', 'attr_quotes'):
					d['attr_quotes'] = p.get('profile', 'attr_quotes').lower()

				if p.has_option('profile', 'tag_nl'):
					if p.get('profile', 'tag_nl').lower() == 'decide':
						d['tag_nl'] = 'decide'
					else:
						d['tag_nl'] = p.getboolean('profile', 'tag_nl')

				if p.has_option('profile', 'place_cursor'):
					d['place_cursor'] = p.getboolean('profile', 'place_cursor')

				if p.has_option('profile', 'indent'):
					d['indent'] = p.getboolean('profile', 'indent')

				if p.has_option('profile', 'self_closing_tag'):
					if p.get('profile', 'self_closing_tag').lower() == 'xhtml':
						d['self_closing_tag'] = 'xhtml'
					else:
						d['self_closing_tag'] = p.getboolean('profile', 'self_closing_tag')

				zen.setup_profile(name, d)


	def expand_abbreviation(self, line, index):

		abbr, abbr_pos = zen.find_abbr_in_line(line.strip(), index)
		if not abbr:
			return ""
		text = zen.expand_abbreviation(abbr, self.doc_type, self.active_profile)
		return abbr, abbr_pos, text


	def wrap_with_abbreviation(self, abbr, text):

		if abbr.endswith('>'):
			abbr = abbr[:-1]
		text = zen.wrap_with_abbreviation(abbr, text, self.doc_type, self.active_profile)
		if not text:
			return ""
		else:
			return text


	@property
	def profiles_dir(self):
		return self._profiles_dir


	@property
	def zendir(self):
		return self._zendir
